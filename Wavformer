import wave
import array
import numpy as np

def create_wav_file(amplitude_sequence, sample_rate, output_filename):
    # Create a new WAV file
    with wave.open(output_filename, 'w') as wav_file:
        # Set the WAV file parameters
        wav_file.setnchannels(1)  # Mono audio
        wav_file.setsampwidth(2)  # 2 bytes per sample for 16-bit audio
        wav_file.setframerate(sample_rate)

        # Convert amplitude sequence to array of 16-bit integers
        audio_data = array.array('h', [int(amplitude) for amplitude in amplitude_sequence])
        
        # Write the audio data to the WAV file
        wav_file.writeframes(audio_data.tobytes())

# Example usage:

amplitude_sequence=[]
input_filename='sourish_1.wav'
with wave.open(input_filename,'r') as wav_file:
    num_frames = wav_file.getnframes()
    sample_width = wav_file.getsampwidth()
    sample_rate = wav_file.getframerate()
    raw_frames = wav_file.readframes(num_frames)
    audio_array = np.frombuffer(raw_frames, dtype=np.int16)
    amplitude_sequence=audio_array
    
    print("Number of frames:", num_frames)
    print("Sample width (bytes):", sample_width)
    print("Sample rate:", sample_rate)
    print("Length of audio array:", len(audio_array))

print(amplitude_sequence)
#amplitude_sequence = [0.1, 0.2, 0.4, 0.6, 0.8, 1.0, 0.8, 0.6, 0.4, 0.2, 0.1]
sample_rate = 97656  # Sample rate in Hz
output_filename = 'output.wav'

create_wav_file(amplitude_sequence, sample_rate, output_filename)










# Interpolation


# upsampled_array = np.repeat(amplitude_sequence, 2)
# upsampled_array = upsampled_array/2

# # Linear interpolation
# interpolated_array = np.zeros(len(upsampled_array) - 1, dtype=np.float32)
# for i in range(len(upsampled_array) - 1):
#     i=i+1
#     interpolated_array[i] = (upsampled_array[i-1] + upsampled_array[i + 1])

# # Print information about the original and interpolated arrays
# print("Original length:", len(amplitude_sequence))
# print("Interpolated length:", len(interpolated_array))

# output_filename = 'interpol.wav'

# create_wav_file(interpolated_array, sample_rate*1.99, output_filename)

